✅ Tasks – NeuroCanvas AI Thought Mapping SaaS
✅ 1.0 Project Setup and Architecture
 1.1 Initialize PNPM monorepo with apps/ and packages/ folders

 1.2 Configure Next.js 15.4.6 with TypeScript support

 1.3 Install and configure Tailwind CSS with custom black/gold theme

 1.4 Add ESLint, Prettier, Husky, and commitlint for code standards

 1.5 Set up shared TypeScript configs and interfaces in packages/types

 1.6 Configure env variables for OpenAI, Supabase, and runtime secrets

 1.7 Add Vite or Turbo support for faster local development (optional)

 1.8 Create base layout, _app.tsx, _document.tsx, theme provider

 1.9 Set up GitHub Actions or Vercel for CI/CD pipeline

✅ 2.0 Authentication & User Flow
 2.1 Integrate Supabase Auth (Magic Link + OAuth: Google, GitHub)

 2.2 Create Login, Signup, Logout flows with useSupabaseClient()

 2.3 Store and retrieve user data from Supabase users table

 2.4 Build user onboarding screen for first-time users

 2.5 Redirect to Dashboard if returning user with saved sessions

 2.6 Protect authenticated routes with session guard hook

✅ 3.0 Input Layer (Text & Voice)
 3.1 Create thought input component with textarea and submit button

 3.2 Add keyboard shortcut support (⌘+Enter) to submit thoughts

 3.3 Implement audio recording with Web Audio API

 3.4 Stream audio blob to backend and transcribe via OpenAI Whisper API

 3.5 Store input temporarily in local state before processing

 3.6 Add character count and simple emotion validation on input

✅ 4.0 AI Thought Parsing (GPT-4 & Claude)
 4.1 Create /api/generate-map endpoint to send input to GPT-4

 4.2 Engineer prompt to return hierarchical JSON tree of thoughts

 4.3 Normalize and validate GPT response using Zod schema

 4.4 Add fallback and retry logic for OpenAI errors or rate limits

 4.5 Highlight priority nodes and detect action items automatically

 4.6 Color-code thoughts by sentiment using Claude analysis

 4.7 Support topic expansion and suggestions from AI

✅ 5.0 Mind Map Interface (n8n-style UI)
 5.1 Integrate React Flow with radial + tree layout engines

 5.2 Render nodes from structured JSON map output

 5.3 Implement node types: Root, Thought, Action, Emotion

 5.4 Add custom styling for nodes: color, icon, shape

 5.5 Enable zoom, pan, and fit-to-view controls

 5.6 Add tooltip or modal to expand thought node details

 5.7 Save and restore layout/positions of user-edited nodes

 5.8 Add edge reconnection and link drag handling

✅ 6.0 Real-time Sync & Collaboration
 6.1 Set up Supabase Realtime for mind map state changes

 6.2 Enable multi-user editing via shared presence system

 6.3 Show collaborator cursors, avatars, active selections

 6.4 Implement node-level locking to prevent collisions

 6.5 Add typing indicator for AI thought prompts

 6.6 Use optimistic updates with rollback for sync conflicts

✅ 7.0 Saving, Versioning, and Recovery
 7.1 Save maps to Supabase maps table (linked to user ID)

 7.2 Track timestamp and map title/description metadata

 7.3 Implement versioning: auto-save + manual checkpoints

 7.4 View and restore older versions from history panel

 7.5 Add error handling if a save fails or times out

 7.6 Enable map deletion with undo timeout

✅ 8.0 Export, Import, and Templates
 8.1 Export map to PNG using HTML-to-Canvas

 8.2 Export map as downloadable PDF + JSON format

 8.3 Create upload/import panel to load saved JSON maps

 8.4 Add pre-built templates (Essay, Sprint Plan, Persona Map, etc.)

 8.5 Allow users to save their own maps as reusable templates

 8.6 Store templates in templates table or JSON in Supabase

✅ 9.0 AI Coaching & Thought Exploration
 9.1 Create /api/coach endpoint to generate suggestions

 9.2 Ask AI to propose deeper questions or adjacent topics

 9.3 Show suggestions in a side panel with “Add to Map” CTA

 9.4 Add UI for follow-up prompts per node

 9.5 Track which suggestions were accepted/ignored

 9.6 Enable “AI Conversation” per node (popup chat)

✅ 10.0 Dashboard and User Analytics
 10.1 Create /dashboard route with list of saved maps

 10.2 Show recent activity, versions, and quick actions

 10.3 Visualize thinking style: depth, breadth, emotion

 10.4 Track node count growth over time per map

 10.5 Highlight most common themes and tags

 10.6 Use D3 or Chart.js for simple visualizations

✅ 11.0 Mobile Web Optimization
 11.1 Implement responsive layout with Tailwind breakpoints

 11.2 Move navigation to bottom tab bar for mobile UX

 11.3 Enable pinch-zoom and node tap-to-focus

 11.4 Optimize input areas for speech-to-text and voice

 11.5 Add progressive loading of large maps

 11.6 Test all devices (iOS/Android) for layout issues