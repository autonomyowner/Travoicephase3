NeuroCanvas: SaaS Task Breakdown

PHASE 1: MVP DEVELOPMENT

1.0 Project Setup and Environment

1.1 Codebase Initialization

Description: Set up monorepo with client, server, and shared folders.

Acceptance Criteria: Project compiles without errors; dev servers run locally.

Complexity: Medium

Dependencies: None

Tech Specs:

pnpm workspaces

packages/, apps/client, apps/server

Files: /package.json, /apps/client, /apps/server, /tsconfig.json

2.0 User Authentication & Onboarding

2.1 Supabase Auth Integration

Acceptance Criteria: Users can register/login/logout.

Complexity: Medium

Dependencies: 1.1

Tech Specs:

Supabase Magic Link + OAuth (Google, GitHub)

Use Supabase client SDK in React

Files: /apps/client/lib/auth.ts, /apps/server/routes/auth.ts

2.2 User Onboarding Flow

Acceptance Criteria: First-time users see onboarding mind map prompt.

Complexity: Medium

Dependencies: 2.1

Tech Specs:

Onboarding flags stored in users table

Files: /apps/client/pages/onboarding.tsx

3.0 Thought Input Layer

3.1 Text Input Component

Acceptance Criteria: Users can submit thoughts via a text area.

Complexity: Low

Dependencies: 2.1

Tech Specs:

React hook form

Submit via Enter key or button

Files: /apps/client/components/ThoughtInput.tsx

3.2 Voice Input with Whisper

Acceptance Criteria: Users can record thoughts via mic and transcribe.

Complexity: High

Dependencies: 3.1

Tech Specs:

Audio capture with WebAudio

Send blob to backend

Backend streams to Whisper API

Files:

Frontend: /apps/client/components/VoiceInput.tsx

Backend: /apps/server/routes/voice.ts

4.0 AI Thought Parsing

4.1 Send Input to OpenAI GPT-4

Acceptance Criteria: User input generates JSON map of thoughts.

Complexity: Medium

Dependencies: 3.1 or 3.2

Tech Specs:

Prompt engineering for structured mind map

openai.ChatCompletion

Files: /apps/server/services/generateMap.ts

4.2 Map Schema

Acceptance Criteria: Thoughts must comply with map node schema.

Complexity: Medium

Tech Specs:

type ThoughtNode = {
  id: string
  text: string
  children: ThoughtNode[]
  emotion?: 'positive' | 'neutral' | 'negative'
  priority?: number
}

Files: /packages/types/thought.ts

5.0 Mind Map Visualization (n8n-style)

5.1 Node-Based UI with React Flow

Acceptance Criteria: Users see and interact with generated nodes.

Complexity: High

Dependencies: 4.1

Tech Specs:

React Flow

Dynamic node creation, layout rendering

Files: /apps/client/components/MindMap.tsx

5.2 Node Styles

Acceptance Criteria: Node colors reflect emotions; shapes/types differentiate categories.

Complexity: Medium

Dependencies: 5.1

Tech Specs: Tailwind, React Flow custom node types

Files: /apps/client/components/NodeStyles.tsx

5.3 Drag-and-Drop Interactions

Acceptance Criteria: Nodes can be repositioned and reconnected.

Complexity: Medium

Dependencies: 5.1

Files: /apps/client/components/NodeEditor.tsx

6.0 Saving and Syncing Maps

6.1 Supabase Realtime

Acceptance Criteria: Changes are synced live across clients.

Complexity: High

Dependencies: 5.1

Tech Specs: Supabase Realtime API, Row-level security

Files: /apps/server/routes/maps.ts, /apps/client/lib/realtime.ts

6.2 Version History

Acceptance Criteria: Users can revert or review map versions.

Complexity: Medium

Dependencies: 6.1

Files: /apps/client/components/VersionHistory.tsx

7.0 Collaboration

7.1 Multi-User Presence

Acceptance Criteria: See collaborators' cursors/nodes in real-time.

Complexity: High

Dependencies: 6.1

Files: /apps/client/lib/presence.ts

7.2 Commenting System

Acceptance Criteria: Users can comment on nodes.

Complexity: Medium

Dependencies: 5.1

Files: /apps/client/components/NodeComments.tsx

PHASE 2: BETA

8.0 Export + Import

8.1 Export to PDF / PNG / JSON

Acceptance Criteria: Users can export maps.

Complexity: Medium

Files: /apps/client/utils/export.ts

8.2 Import Notes or JSON

Acceptance Criteria: Import raw data to generate new maps.

Files: /apps/client/components/ImportPanel.tsx

9.0 Templates

9.1 Template Library

Acceptance Criteria: Users choose map types (Essay Plan, Project Sprint, etc.)

Files: /apps/client/data/templates.ts, /apps/client/components/Templates.tsx

10.0 AI Coaching Layer

10.1 Prompt-Based Coach

Acceptance Criteria: Suggests new branches or deeper thoughts

Files: /apps/server/services/coach.ts, /apps/client/components/Coach.tsx

11.0 Dashboard and Analytics

11.1 User Dashboard

Acceptance Criteria: View saved maps, usage, thinking style

Files: /apps/client/pages/dashboard.tsx

11.2 Analytics Graphs

Files: /apps/client/components/Analytics.tsx

12.0 Mobile Web App

12.1 Responsive Redesign

Acceptance Criteria: App works well on mobile

Tech Specs: Tailwind responsive + Bottom nav

PHASE 3: FULL LAUNCH

13.0 Billing & Plans

13.1 Stripe Integration

Acceptance Criteria: Paywall + subscription flows

Files: /apps/server/routes/billing.ts, /apps/client/pages/pricing.tsx

14.0 Deployment

14.1 Vercel (frontend) + Railway (backend)

Files: /vercel.json, /apps/server/Dockerfile

15.0 QA & Testing

15.1 Unit & E2E Testing

Tools: Vitest, Playwright

Files: /tests, /apps/client/__tests__

16.0 Documentation

16.1 Developer Docs

Files: /docs/architecture.md, /docs/api.md, /docs/setup.md

16.2 User Guides

Files: /apps/client/pages/help.tsx, /public/help.pdf

17.0 Security & Performance

17.1 RLS Policies in Supabase

Validate row ownership and access control.

17.2 Rate Limits & Abuse Protection

Tools: Rate limit middleware

17.3 Load Testing

Tools: k6 or Artillery

